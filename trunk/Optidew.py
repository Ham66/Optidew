#!/usr/bin/env python
# -*- coding:utf-8 -*-


# ############################################################################
#  license :
# ============================================================================
#
#  File :        Optidew.py
#
#  Project :     
#
# This file is part of Tango device class.
# 
# Tango is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# Tango is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with Tango.  If not, see <http://www.gnu.org/licenses/>.
# 
#
#  $Author :      maxim.stassevich$
#
#  $Revision :    $
#
#  $Date :        $
#
#  $HeadUrl :     $
# ============================================================================
#            This file is generated by POGO
#     (Program Obviously used to Generate tango Object)
# ############################################################################

__all__ = ["Optidew", "OptidewClass", "main"]

__docformat__ = 'restructuredtext'

import PyTango
import sys
# Add additional import
#----- PROTECTED REGION ID(Optidew.additionnal_import) ENABLED START -----#
import serial
import serial.tools.list_ports
import time
import threading


class read_Optidew_Thread(threading.Thread):
    def __init__(self, port):
        threading.Thread.__init__(self)
        self.port = port
        self.running = True
        self.fault = False
        self.commandAllowed = False
        self.command = ""
        
        self.dewpoint = None
        self.temperature = None
        self.rh = None
        self.mirrorSignalLevel = None
        self.unit = None
        self.stateOfInstrument = None
        self.gm = None
        self.gkg = None
        self.statusOfInstrument = None
        self.depressionHeatPump = None
        self.firstTimeCommandX = True
        
        self.ser = serial.Serial(              
               port = self.port,
               baudrate = 9600,
               parity = serial.PARITY_NONE,
               stopbits = serial.STOPBITS_ONE,
               bytesize = serial.EIGHTBITS,
               timeout = 1
               )
        print "Starting thread"
    def run(self):
        while self.running:
            try:
                if self.commandAllowed:
                    self.ser.write("st" + "\r" + "\n")
                    reply = self.ser.readline()
                    self.ser.write(self.command)
                    reply = self.ser.readline()
                    self.commandAllowed = False
                    self.command = ""
                    self.firstTimeCommandX = True
                if self.firstTimeCommandX:
                    command = "x" + "\r" + "\n"
                    self.ser.write(command)
                    data = self.ser.readline()
                    if len(data) == 36:
                        self.firstTimeCommandX = False
                    else:
                        self.fault = True
                #command = "y" + "\r" + "\n"
                #self.ser.write(command)
                data = self.ser.readline()
                if len(data) == 36:
                    if float(data[1:5]) > 5000:
                        self.dewpoint = -(8000 - float(data[1:5])) / 10
                    else:
                        self.dewpoint = float(data[1:5]) / 10
                    if float(data[5:9]) > 5000:
                        self.temperature = -(8000 - float(data[5:9])) / 10
                    else:
                        self.temperature = float(data[5:9]) / 10
                    self.rh = float(data[9:13]) / 10
                    self.mirrorSignalLevel = int(data[13:17])
                    self.unit = int(data[32])
                    self.stateOfInstrument = int(data[33])
                    self.gm = float(data[22:27]) / 100
                    self.gkg = float(data[27:32]) / 100
                    self.statusOfInstrument = int(data[21])
                    self.depressionHeatPump = int(data[17:21])
                    self.fault = False
                else:
                    self.fault = True
                    self.firstTimeCommandX = True
            except Exception as e:
                print(e)
                self.fault = True
            time.sleep(0.3)
        self.ser.close()
        print "Thread exited"
        
    def stop(self):
        self.running = False
        print "Exiting thread.."
        
    def get_data(self):
        return (self.fault, self.dewpoint, self.temperature, self.rh, self.mirrorSignalLevel, self.unit,
                 self.stateOfInstrument, self.gm, self.gkg, self.statusOfInstrument, self.depressionHeatPump)
    
    def send_command(self, command):
        self.command = command
        self.commandAllowed = True


#----- PROTECTED REGION END -----#    //    Optidew.additionnal_import

# Device States Description
# ON : Device is on ON state
# OFF : Device is on OFF state
# DISABLE : 


class Optidew (PyTango.Device_4Impl):
    """Tango server for control optidew"""
    
    # -------- Add you global variables here --------------------------
    #----- PROTECTED REGION ID(Optidew.global_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#    //    Optidew.global_variables

    def __init__(self, cl, name):
        PyTango.Device_4Impl.__init__(self,cl,name)
        self.debug_stream("In __init__()")
        Optidew.init_device(self)
        #----- PROTECTED REGION ID(Optidew.__init__) ENABLED START -----#
        #self.set_status("in __init__")
        self.ser = None
        self.globalData = None
        #self.globalIncrement = 0
        #----- PROTECTED REGION END -----#    //    Optidew.__init__
        
    def delete_device(self):
        self.debug_stream("In delete_device()")
        #----- PROTECTED REGION ID(Optidew.delete_device) ENABLED START -----#
        #command = "st" + "\r" + "\n"
        #self.send_command(command)
        if self.ser != None:
            self.ser.close()
            self.ser = None
            self.globalData = None
            #self.globalIncrement = 0
        if self.get_state() != PyTango.DevState.OFF:
            self.set_state(PyTango.DevState.OFF)
            self.set_status("Device is in OFF state")
        #----- PROTECTED REGION END -----#    //    Optidew.delete_device

    def init_device(self):
        self.debug_stream("In init_device()")
        self.get_device_properties(self.get_device_class())
        self.attr_dewpoint_read = 0.0
        self.attr_temperature_read = 0.0
        self.attr_rh_read = 0.0
        self.attr_mirrorSignalLevel_read = 0.0
        self.attr_unit_read = 0
        self.attr_stateOfInstrument_read = 0
        self.attr_depressionHeatPump_read = 0
        self.attr_statusOfInstrument_read = 0
        self.attr_gm_read = 0.0
        self.attr_gkg_read = 0.0
        self.attr_maxDepression_read = False
        self.attr_FAST_read = False
        #----- PROTECTED REGION ID(Optidew.init_device) ENABLED START -----#
        #self.set_state(PyTango.DevState.OFF)
        self.On()
        #self.set_status("in init_device")
        #----- PROTECTED REGION END -----#    //    Optidew.init_device

    def always_executed_hook(self):
        self.debug_stream("In always_excuted_hook()")
        #----- PROTECTED REGION ID(Optidew.always_executed_hook) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.always_executed_hook

    # -------------------------------------------------------------------------
    #    Optidew read/write attribute methods
    # -------------------------------------------------------------------------
    
    def read_dewpoint(self, attr):
        self.debug_stream("In read_dewpoint()")
        #----- PROTECTED REGION ID(Optidew.dewpoint_read) ENABLED START -----#
        attr.set_value(self.attr_dewpoint_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.dewpoint_read
        
    def is_dewpoint_allowed(self, attr):
        self.debug_stream("In is_dewpoint_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_dewpoint_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_dewpoint_allowed
        return state_ok
        
    def read_temperature(self, attr):
        self.debug_stream("In read_temperature()")
        #----- PROTECTED REGION ID(Optidew.temperature_read) ENABLED START -----#
        attr.set_value(self.attr_temperature_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.temperature_read
        
    def is_temperature_allowed(self, attr):
        self.debug_stream("In is_temperature_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_temperature_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_temperature_allowed
        return state_ok
        
    def read_rh(self, attr):
        self.debug_stream("In read_rh()")
        #----- PROTECTED REGION ID(Optidew.rh_read) ENABLED START -----#
        attr.set_value(self.attr_rh_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.rh_read
        
    def is_rh_allowed(self, attr):
        self.debug_stream("In is_rh_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_rh_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_rh_allowed
        return state_ok
        
    def read_mirrorSignalLevel(self, attr):
        self.debug_stream("In read_mirrorSignalLevel()")
        #----- PROTECTED REGION ID(Optidew.mirrorSignalLevel_read) ENABLED START -----#
        attr.set_value(self.attr_mirrorSignalLevel_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.mirrorSignalLevel_read
        
    def is_mirrorSignalLevel_allowed(self, attr):
        self.debug_stream("In is_mirrorSignalLevel_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_mirrorSignalLevel_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_mirrorSignalLevel_allowed
        return state_ok
        
    def read_unit(self, attr):
        self.debug_stream("In read_unit()")
        #----- PROTECTED REGION ID(Optidew.unit_read) ENABLED START -----#
        attr.set_value(self.attr_unit_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.unit_read
        
    def write_unit(self, attr):
        self.debug_stream("In write_unit()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Optidew.unit_write) ENABLED START -----#
        if data == 0:
            command = "degc" + "\r" + "\n"
        else:
            command = "degf" + "\r" + "\n"
        self.get_thread.send_command(command)
        #----- PROTECTED REGION END -----#    //    Optidew.unit_write
        
    def is_unit_allowed(self, attr):
        self.debug_stream("In is_unit_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_unit_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_unit_allowed
        return state_ok
        
    def read_stateOfInstrument(self, attr):
        self.debug_stream("In read_stateOfInstrument()")
        #----- PROTECTED REGION ID(Optidew.stateOfInstrument_read) ENABLED START -----#
        attr.set_value(self.attr_stateOfInstrument_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.stateOfInstrument_read
        
    def is_stateOfInstrument_allowed(self, attr):
        self.debug_stream("In is_stateOfInstrument_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_stateOfInstrument_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_stateOfInstrument_allowed
        return state_ok
        
    def read_depressionHeatPump(self, attr):
        self.debug_stream("In read_depressionHeatPump()")
        #----- PROTECTED REGION ID(Optidew.depressionHeatPump_read) ENABLED START -----#
        attr.set_value(self.attr_depressionHeatPump_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.depressionHeatPump_read
        
    def is_depressionHeatPump_allowed(self, attr):
        self.debug_stream("In is_depressionHeatPump_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_depressionHeatPump_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_depressionHeatPump_allowed
        return state_ok
        
    def read_statusOfInstrument(self, attr):
        self.debug_stream("In read_statusOfInstrument()")
        #----- PROTECTED REGION ID(Optidew.statusOfInstrument_read) ENABLED START -----#
        attr.set_value(self.attr_statusOfInstrument_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.statusOfInstrument_read
        
    def is_statusOfInstrument_allowed(self, attr):
        self.debug_stream("In is_statusOfInstrument_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_statusOfInstrument_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_statusOfInstrument_allowed
        return state_ok
        
    def read_gm(self, attr):
        self.debug_stream("In read_gm()")
        #----- PROTECTED REGION ID(Optidew.gm_read) ENABLED START -----#
        attr.set_value(self.attr_gm_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.gm_read
        
    def is_gm_allowed(self, attr):
        self.debug_stream("In is_gm_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_gm_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_gm_allowed
        return state_ok
        
    def read_gkg(self, attr):
        self.debug_stream("In read_gkg()")
        #----- PROTECTED REGION ID(Optidew.gkg_read) ENABLED START -----#
        attr.set_value(self.attr_gkg_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.gkg_read
        
    def is_gkg_allowed(self, attr):
        self.debug_stream("In is_gkg_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [])
        #----- PROTECTED REGION ID(Optidew.is_gkg_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_gkg_allowed
        return state_ok
        
    def read_maxDepression(self, attr):
        self.debug_stream("In read_maxDepression()")
        #----- PROTECTED REGION ID(Optidew.maxDepression_read) ENABLED START -----#
        attr.set_value(self.attr_maxDepression_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.maxDepression_read
        
    def write_maxDepression(self, attr):
        self.debug_stream("In write_maxDepression()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Optidew.maxDepression_write) ENABLED START -----#
        if data:
            command = "maxon" + "\r" + "\n"
        else:
            command = "maxoff" + "\r" + "\n"
        self.get_thread.send_command(command)
        #----- PROTECTED REGION END -----#    //    Optidew.maxDepression_write
        
    def is_maxDepression_allowed(self, attr):
        self.debug_stream("In is_maxDepression_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_maxDepression_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_maxDepression_allowed
        return state_ok
        
    def read_FAST(self, attr):
        self.debug_stream("In read_FAST()")
        #----- PROTECTED REGION ID(Optidew.FAST_read) ENABLED START -----#
        attr.set_value(self.attr_FAST_read)
        
        #----- PROTECTED REGION END -----#    //    Optidew.FAST_read
        
    def write_FAST(self, attr):
        self.debug_stream("In write_FAST()")
        data = attr.get_write_value()
        #----- PROTECTED REGION ID(Optidew.FAST_write) ENABLED START -----#
        if data:
            command = "faston" + "\r" + "\n"
        else:
            command = "fastoff" + "\r" + "\n"
        self.get_thread.send_command(command)
        #----- PROTECTED REGION END -----#    //    Optidew.FAST_write
        
    def is_FAST_allowed(self, attr):
        self.debug_stream("In is_FAST_allowed()")
        if attr==PyTango.AttReqType.READ_REQ:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        else:
            state_ok = not(self.get_state() in [PyTango.DevState.OFF,
                PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_FAST_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_FAST_allowed
        return state_ok
        
    
    
            
    def read_attr_hardware(self, data):
        self.debug_stream("In read_attr_hardware()")
        #----- PROTECTED REGION ID(Optidew.read_attr_hardware) ENABLED START -----#
        if self.get_state() != PyTango.DevState.OFF:
            (fault, dewpoint, temperature, rh, mirrorSignalLevel, unit, stateOfInstrument, gm, gkg,
              statusOfInstrument, depressionHeatPump) = self.get_thread.get_data()
            if fault == True:
                if self.get_state() != PyTango.DevState.DISABLE:
                    self.set_state(PyTango.DevState.DISABLE)
                    self.set_status("Device is in Disable state")
            else:
                if self.get_state() != PyTango.DevState.ON:
                    self.set_state(PyTango.DevState.ON)
                    self.set_status("Device is in On state")
                self.attr_dewpoint_read = dewpoint
                self.attr_temperature_read = temperature
                self.attr_rh_read = rh
                self.attr_mirrorSignalLevel_read = mirrorSignalLevel
                self.attr_unit_read = unit
                self.attr_stateOfInstrument_read = stateOfInstrument
                self.attr_gm_read = gm
                self.attr_gkg_read = gkg
                self.attr_statusOfInstrument_read = statusOfInstrument
                self.attr_depressionHeatPump_read = depressionHeatPump
        #time.sleep(0.3)
        #----- PROTECTED REGION END -----#    //    Optidew.read_attr_hardware


    # -------------------------------------------------------------------------
    #    Optidew command methods
    # -------------------------------------------------------------------------
    
    def On(self):
        """ Start Optiedew
        """
        self.debug_stream("In On()")
        #----- PROTECTED REGION ID(Optidew.On) ENABLED START -----#
        if self.get_state() != PyTango.DevState.ON:
            self.set_state(PyTango.DevState.ON)
            self.set_status("Device is in ON state")
        self.get_thread = read_Optidew_Thread(self.port)
        self.get_thread.start()
        #----- PROTECTED REGION END -----#    //    Optidew.On
        
    def is_On_allowed(self):
        self.debug_stream("In is_On_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.ON,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_On_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_On_allowed
        return state_ok
        
    def Stop(self):
        """ Stop Optiedew
        """
        self.debug_stream("In Stop()")
        #----- PROTECTED REGION ID(Optidew.Stop) ENABLED START -----#
        self.get_thread.stop()
        if self.get_state() != PyTango.DevState.OFF:
            self.set_state(PyTango.DevState.OFF)
            self.set_status("Device is in OFF state")
        #----- PROTECTED REGION END -----#    //    Optidew.Stop
        
    def is_Stop_allowed(self):
        self.debug_stream("In is_Stop_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF])
        #----- PROTECTED REGION ID(Optidew.is_Stop_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_Stop_allowed
        return state_ok
        
    def prs(self, argin):
        """ Sets pressure value
        :param argin: Pressure value between 0 & 65535
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In prs()")
        #----- PROTECTED REGION ID(Optidew.prs) ENABLED START -----#
        #value = "%.2f"%argin
        if argin >= 0 and argin <= 65535:
            value = str(argin)
            command = "prs=" + value + "\r" + "\n"
            self.get_thread.send_command(command)
        else:
            self.set_status("value out of range")
        #----- PROTECTED REGION END -----#    //    Optidew.prs
        
    def is_prs_allowed(self):
        self.debug_stream("In is_prs_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_prs_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_prs_allowed
        return state_ok
        
    def abt(self, argin):
        """ Sets ABC duration
        :param argin: ABC duration between 0 & 65535
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In abt()")
        #----- PROTECTED REGION ID(Optidew.abt) ENABLED START -----#
        if argin >= 0 and argin <= 65535:        
            value = str(argin)
            command = "abt=" + value + "\r" + "\n"
            self.get_thread.send_command(command)
        else:
            self.set_status("value out of range")
        #----- PROTECTED REGION END -----#    //    Optidew.abt
        
    def is_abt_allowed(self):
        self.debug_stream("In is_abt_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_abt_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_abt_allowed
        return state_ok
        
    def hdt(self, argin):
        """ Sets HOLD time
        :param argin: HOLD time between 0 & 65535
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In hdt()")
        #----- PROTECTED REGION ID(Optidew.hdt) ENABLED START -----#
        if argin >= 0 and argin <= 65535:
            value = str(argin)
            command = "hdt=" + value + "\r" + "\n"
            self.get_thread.send_command(command)
        else:
            self.set_status("value out of range")
        #----- PROTECTED REGION END -----#    //    Optidew.hdt
        
    def is_hdt_allowed(self):
        self.debug_stream("In is_hdt_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_hdt_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_hdt_allowed
        return state_ok
        
    def ht(self, argin):
        """ Sets max HOLD time
        :param argin: max HOLD time between 0 & 65535
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In ht()")
        #----- PROTECTED REGION ID(Optidew.ht) ENABLED START -----#
        if argin >= 0 and argin <= 65535:
            value = str(argin)
            command = "ht=" + value + "\r" + "\n"
            self.get_thread.send_command(command)
        else:
            self.set_status("value out of range")
        #----- PROTECTED REGION END -----#    //    Optidew.ht
        
    def is_ht_allowed(self):
        self.debug_stream("In is_ht_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_ht_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_ht_allowed
        return state_ok
        
    def mmt(self, argin):
        """ Sets MEASUREMENT time
        :param argin: MEASUREMENT time between 0 & 65535
        :type argin: PyTango.DevLong
        """
        self.debug_stream("In mmt()")
        #----- PROTECTED REGION ID(Optidew.mmt) ENABLED START -----#
        if argin > 0 and argin <= 65535:        
            value = str(argin)
            command = "mmt=" + value + "\r" + "\n"
            self.get_thread.send_command(command)
        elif argin == 0:
            command = "mmt" + "\r" + "\n"
            self.get_thread.send_command(command)
        else:
            self.set_status("value out of range")
        #----- PROTECTED REGION END -----#    //    Optidew.mmt
        
    def is_mmt_allowed(self):
        self.debug_stream("In is_mmt_allowed()")
        state_ok = not(self.get_state() in [PyTango.DevState.OFF,
            PyTango.DevState.DISABLE])
        #----- PROTECTED REGION ID(Optidew.is_mmt_allowed) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.is_mmt_allowed
        return state_ok
        

    #----- PROTECTED REGION ID(Optidew.programmer_methods) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#    //    Optidew.programmer_methods

class OptidewClass(PyTango.DeviceClass):
    # -------- Add you global class variables here --------------------------
    #----- PROTECTED REGION ID(Optidew.global_class_variables) ENABLED START -----#
    
    #----- PROTECTED REGION END -----#    //    Optidew.global_class_variables


    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'port':
            [PyTango.DevString, 
            "Com port",
            ["/dev/ttyUSB0"] ],
        }


    #    Command definitions
    cmd_list = {
        'On':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'Stop':
            [[PyTango.DevVoid, "none"],
            [PyTango.DevVoid, "none"]],
        'prs':
            [[PyTango.DevLong, "Pressure value between 0 & 65535"],
            [PyTango.DevVoid, "none"]],
        'abt':
            [[PyTango.DevLong, "ABC duration between 0 & 65535"],
            [PyTango.DevVoid, "none"]],
        'hdt':
            [[PyTango.DevLong, "HOLD time between 0 & 65535"],
            [PyTango.DevVoid, "none"]],
        'ht':
            [[PyTango.DevLong, "max HOLD time between 0 & 65535"],
            [PyTango.DevVoid, "none"]],
        'mmt':
            [[PyTango.DevLong, "MEASUREMENT time between 0 & 65535"],
            [PyTango.DevVoid, "none"]],
        }


    #    Attribute definitions
    attr_list = {
        'dewpoint':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Dewpoint",
            } ],
        'temperature':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Temperature",
            } ],
        'rh':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "%rh",
                'unit': "%",
            } ],
        'mirrorSignalLevel':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Mirror signal level",
                'description': "Mirror signal level can have a value from 0 to 1023",
            } ],
        'unit':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Unit",
                'max value': "1",
                'min value': "0",
                'description': "0 = 0C, 1 = 0F",
                'Memorized':"true_without_hard_applied"
            } ],
        'stateOfInstrument':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "State of the Instrument",
                'description': "0 = cooling, 1 = control, 2 = heating",
            } ],
        'depressionHeatPump':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "heat pump depression",
                'description': "Heat pump depression can have value from 0 to 1023",
            } ],
        'statusOfInstrument':
            [[PyTango.DevShort,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "Status of the Instrument",
                'description': "0 = ABC, 1 = Data Hold, 2 = Measuring, 3 = Optics Alarm, 4 = Set-point Alarm",
            } ],
        'gm':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "gm-3",
            } ],
        'gkg':
            [[PyTango.DevDouble,
            PyTango.SCALAR,
            PyTango.READ],
            {
                'label': "gkg-1",
            } ],
        'maxDepression':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "Set max depression",
            } ],
        'FAST':
            [[PyTango.DevBoolean,
            PyTango.SCALAR,
            PyTango.READ_WRITE],
            {
                'label': "FAST",
                'description': "Enables / disables FAST function",
            } ],
        }


def main():
    try:
        py = PyTango.Util(sys.argv)
        py.add_class(OptidewClass, Optidew, 'Optidew')
        #----- PROTECTED REGION ID(Optidew.add_classes) ENABLED START -----#
        
        #----- PROTECTED REGION END -----#    //    Optidew.add_classes

        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed as e:
        print ('-------> Received a DevFailed exception:', e)
    except Exception as e:
        print ('-------> An unforeseen exception occured....', e)

if __name__ == '__main__':
    main()